// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  login         String        @unique
  passwordHash  String        @map("password_hash")
  salt          String        @db.VarChar(800)
  role          String        @db.VarChar(80)
  firstName     String?       @map("first_name")
  lastName      String?       @map("last_name")
  avatarPhotoId Int?          @map("avatar_photo_id")
  email         String?
  rating        Float?
  posts         Post[]
  tours         Tour[]
  reviews       Review[]
  activities    Activity[]
  transactions  Transaction[]
  orders        Order[]
  photos        Photo[]

  @@map("user")
}

model Post {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(180)
  description     String
  content         String
  user            User     @relation(fields: [postAuthorId], references: [id])
  postAuthorId    Int      @map("post_author_id")
  type            String   @db.VarChar(20)
  guid            String   @db.VarChar(80)
  image           String   @db.VarChar(512)
  status          String   @db.VarChar(20)
  route           String   @db.VarChar(512)
  categories      String[]
  metaTitle       String?  @map("meta_title") @db.VarChar(512)
  metaDescription String?  @map("meta_descriptions") @db.VarChar(512)
  link            String?  @db.VarChar(512)
  pubDate         String?  @db.VarChar(128)

  @@map("post")
}

model Review {
  id            Int    @id @default(autoincrement())
  content       String
  estimation    Json
  estimateValue Int    @map("estimate_value")
  authorId      Int    @map("author_id")
  user          User   @relation(fields: [authorId], references: [id])
  tour          Tour   @relation(fields: [tourId], references: [id])
  tourId        Int
}

model Photo {
  id         Int       @id @default(autoincrement())
  title      String
  keywords   String[]
  source     String
  fileName   String    @map("file_name")
  authorId   Int       @map("author_id")
  user       User      @relation(fields: [authorId], references: [id])
  tourId     Int?      @map("tour_id")
  tour       Tour?     @relation(fields: [tourId], references: [id])
  activityId Int?      @map("activity_id")
  activity   Activity? @relation(fields: [activityId], references: [id])
}

model Tour {
  id              Int        @id @default(autoincrement())
  title           String     @db.VarChar(180)
  description     String
  mainPhotoId     Int        @map("main_photo_id")
  price           Int
  duration        Int
  content         String     @map("content")
  categories      String[]
  authorId        Int        @map("author_id")
  author          User       @relation(fields: [authorId], references: [id])
  status          String?
  reviews         Review[]
  activities      Activity[]
  orders          Order[]
  photos          Photo[]
  metaTitle       String?    @map("meta_title")
  metaDescription String?    @map("meta_description")
  metaKeywords    String?    @map("meta_keywords")
  rating          Float?
  descriptionText String?    @map("description_text")
  startPlace      Json?      @map("start_place")
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int          @map("user_id")
  user        User         @relation(fields: [userId], references: [id])
  amount      Int
  status      String       @db.VarChar(80)
  places      Int?
  tourId      Int?         @map("tour_id")
  tour        Tour?        @relation(fields: [tourId], references: [id])
  activityId  Int?         @map("activity_id")
  activity    Activity?    @relation(fields: [activityId], references: [id])
  transaction Transaction?
}

model Transaction {
  id       Int   @id @default(autoincrement())
  authorId Int   @map("author_id")
  author   User  @relation(fields: [authorId], references: [id])
  amount   Int
  orderId  Int   @unique
  order    Order @relation(fields: [orderId], references: [id])
}

model Activity {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(180)
  description  String
  status       String   @db.VarChar(80)
  authorId     Int      @map("author_id")
  author       User     @relation(fields: [authorId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp()
  startTime    DateTime @map("start_time")
  finishTime   DateTime @map("finish_time")
  places       Int
  participants Int[]
  groupPrice   Int      @map("group_price")
  personPrice  Int      @map("person_price")
  type         String   @db.VarChar(80)
  tourId       Int      @map("tour_id")
  tour         Tour     @relation(fields: [tourId], references: [id])
  orders       Order[]
  tags         String[]
  categories   String[]
  discount     Int?
  photos       Photo[]
}
